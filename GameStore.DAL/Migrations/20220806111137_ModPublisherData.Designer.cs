// <auto-generated />
using System;
using GameStore.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20220806111137_ModPublisherData")]
    partial class ModPublisherData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.DAL.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuote")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<int>("UnitsOnOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(6007),
                            Description = "New part of Stalker",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "stalker-2",
                            Name = "Stalker2",
                            NumberOfViews = 0,
                            Price = 70m,
                            PublishedAt = new DateTime(2022, 4, 28, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8355),
                            PublisherName = "GSC",
                            ReorderLevel = 0,
                            UnitsInStock = (short)10,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8658),
                            Description = "Best part",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "dying-light",
                            Name = "Dying light",
                            NumberOfViews = 0,
                            Price = 50m,
                            PublishedAt = new DateTime(2022, 6, 17, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8808),
                            PublisherName = "DeepSiler",
                            ReorderLevel = 0,
                            UnitsInStock = (short)0,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 3,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8821),
                            Description = "Action ",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "left-4-dead",
                            Name = "Left 4 Dead",
                            NumberOfViews = 0,
                            Price = 100m,
                            PublishedAt = new DateTime(2021, 7, 2, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8824),
                            PublisherName = "GSC",
                            ReorderLevel = 0,
                            UnitsInStock = (short)3,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 4,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8826),
                            Description = "Description of cmv",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "call-of-duty-mv",
                            Name = "Call of Duty:MV",
                            NumberOfViews = 0,
                            Price = 30m,
                            PublishedAt = new DateTime(2022, 7, 30, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8828),
                            PublisherName = "Activision",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 5,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8831),
                            Description = "Description of civ",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "civiization-VI",
                            Name = "Sid Meier`s Civilization VI",
                            NumberOfViews = 0,
                            Price = 60m,
                            PublishedAt = new DateTime(2022, 7, 7, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8832),
                            PublisherName = "Firaxis",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 6,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8834),
                            Description = "Description of arma",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "arma-3",
                            Name = "Arma 3",
                            NumberOfViews = 0,
                            Price = 80m,
                            PublishedAt = new DateTime(2022, 6, 7, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8836),
                            PublisherName = "Bohemia Interactive",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 7,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8838),
                            Description = "Description of nfs",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "nfs",
                            Name = "Need for speed",
                            NumberOfViews = 0,
                            Price = 100m,
                            PublishedAt = new DateTime(2022, 6, 17, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8839),
                            PublisherName = "GSC",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 8,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8842),
                            Description = "Description of Sam",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "serious-sam-4",
                            Name = "Serious Sam 4",
                            NumberOfViews = 0,
                            Price = 45m,
                            PublishedAt = new DateTime(2022, 7, 22, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8843),
                            PublisherName = "Activision",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 9,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8845),
                            Description = "Description of Sea",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "sea-of-thieves",
                            Name = "Sea of Thieves",
                            NumberOfViews = 0,
                            Price = 90m,
                            PublishedAt = new DateTime(2022, 6, 17, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8847),
                            PublisherName = "GSC",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 10,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8849),
                            Description = "Description of Battlefield",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "battlefield-4",
                            Name = "Battlefield 4",
                            NumberOfViews = 0,
                            Price = 100m,
                            PublishedAt = new DateTime(2022, 7, 7, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8850),
                            PublisherName = "Firaxis",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 11,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8852),
                            Description = "Description of Mass effect 1",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "mass-effect-1",
                            Name = "Mass effect 1",
                            NumberOfViews = 0,
                            Price = 50m,
                            PublishedAt = new DateTime(2022, 7, 17, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8854),
                            PublisherName = "DeepSiler",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        },
                        new
                        {
                            Id = 12,
                            AddedAt = new DateTime(2022, 8, 6, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8856),
                            Description = "Description of Command and conqurer",
                            Discontinued = false,
                            IsDeleted = false,
                            Key = "command-and-conqurer",
                            Name = "Command and conqurer",
                            NumberOfViews = 0,
                            Price = 150m,
                            PublishedAt = new DateTime(2022, 6, 7, 11, 11, 36, 684, DateTimeKind.Utc).AddTicks(8858),
                            PublisherName = "Activision",
                            ReorderLevel = 0,
                            UnitsInStock = (short)5,
                            UnitsOnOrder = 0
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentGenreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "RTS",
                            ParentGenreId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "TBS",
                            ParentGenreId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Races"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Rally",
                            ParentGenreId = 6
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Arcade",
                            ParentGenreId = 6
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Formula",
                            ParentGenreId = 6
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Off-road",
                            ParentGenreId = 6
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "FPS",
                            ParentGenreId = 11
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "TPS",
                            ParentGenreId = 11
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Misc"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.GenresInGames", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GenresInGames");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GameId = 1
                        },
                        new
                        {
                            GenreId = 3,
                            GameId = 2
                        },
                        new
                        {
                            GenreId = 5,
                            GameId = 3
                        },
                        new
                        {
                            GenreId = 11,
                            GameId = 4
                        },
                        new
                        {
                            GenreId = 3,
                            GameId = 5
                        },
                        new
                        {
                            GenreId = 11,
                            GameId = 6
                        },
                        new
                        {
                            GenreId = 6,
                            GameId = 7
                        },
                        new
                        {
                            GenreId = 12,
                            GameId = 8
                        },
                        new
                        {
                            GenreId = 14,
                            GameId = 9
                        },
                        new
                        {
                            GenreId = 7,
                            GameId = 10
                        },
                        new
                        {
                            GenreId = 8,
                            GameId = 11
                        },
                        new
                        {
                            GenreId = 8,
                            GameId = 12
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipperCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("GameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GameKey");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.PlatformType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Type = "Browser"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.PlatformsInGames", b =>
                {
                    b.Property<int>("PlatformTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("PlatformTypeId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("PlatformsInGames");

                    b.HasData(
                        new
                        {
                            PlatformTypeId = 1,
                            GameId = 1
                        },
                        new
                        {
                            PlatformTypeId = 2,
                            GameId = 1
                        },
                        new
                        {
                            PlatformTypeId = 2,
                            GameId = 2
                        },
                        new
                        {
                            PlatformTypeId = 4,
                            GameId = 3
                        },
                        new
                        {
                            PlatformTypeId = 3,
                            GameId = 4
                        },
                        new
                        {
                            PlatformTypeId = 3,
                            GameId = 5
                        },
                        new
                        {
                            PlatformTypeId = 3,
                            GameId = 6
                        },
                        new
                        {
                            PlatformTypeId = 1,
                            GameId = 7
                        },
                        new
                        {
                            PlatformTypeId = 4,
                            GameId = 8
                        },
                        new
                        {
                            PlatformTypeId = 4,
                            GameId = 9
                        },
                        new
                        {
                            PlatformTypeId = 2,
                            GameId = 10
                        },
                        new
                        {
                            PlatformTypeId = 1,
                            GameId = 11
                        },
                        new
                        {
                            PlatformTypeId = 2,
                            GameId = 12
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("ntext");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("ntext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "DeepSilver",
                            Description = "Desc of Publisher 1 ",
                            HomePage = "Home",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "GSC",
                            Description = "Desc of Publisher 2 ",
                            HomePage = "Home2",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Activision",
                            Description = "Desc of Activision",
                            HomePage = "Activision page",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CompanyName = "Firaxis",
                            Description = "Desc of Firaxis",
                            HomePage = "Firaxis page",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CompanyName = "Bohemia Interactive",
                            Description = "Desc of bohemia",
                            HomePage = "Bohemia page",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "cf450b40-8965-4329-a569-b59982929b78",
                            Email = "admin@gmail.com",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 7, 225, 124, 251, 163, 14, 49, 91, 163, 161, 230, 33, 76, 175, 239, 191, 150, 154, 238, 51, 105, 46, 154, 161, 77, 207, 212, 83, 167, 111, 101, 91, 144, 109, 153, 22, 33, 152, 68, 31, 195, 124, 1, 193, 109, 103, 10, 3, 91, 64, 244, 178, 218, 212, 44, 204, 219, 35, 117, 183, 96, 106, 74, 123 },
                            PasswordSalt = new byte[] { 121, 216, 236, 2, 199, 202, 106, 26, 150, 245, 253, 150, 234, 69, 56, 39, 237, 87, 207, 113, 26, 145, 120, 152 },
                            Role = "Admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "d08d6d7d-9bea-42c7-b544-217b61881a6e",
                            Email = "user1@gmail.com",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 67, 174, 187, 178, 126, 206, 251, 69, 26, 135, 126, 209, 31, 233, 139, 15, 237, 135, 20, 239, 27, 47, 200, 112, 229, 108, 10, 169, 215, 56, 196, 45, 150, 254, 119, 2, 238, 96, 156, 234, 177, 22, 177, 227, 111, 59, 47, 8, 170, 11, 39, 230, 252, 216, 6, 23, 255, 129, 116, 215, 225, 226, 227, 166 },
                            PasswordSalt = new byte[] { 136, 149, 229, 204, 241, 175, 174, 40, 117, 125, 177, 56, 59, 18, 156, 155, 29, 135, 188, 224, 10, 102, 17, 161 },
                            Role = "User",
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "dcc11b2a-ee95-4d9d-bae5-03110eb03fd6",
                            Email = "manager1@gmail.com",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 141, 77, 118, 225, 179, 77, 143, 231, 255, 2, 125, 35, 213, 141, 75, 247, 245, 165, 185, 217, 120, 42, 85, 42, 230, 25, 244, 59, 174, 101, 145, 4, 225, 73, 197, 119, 52, 147, 223, 185, 191, 14, 220, 32, 116, 245, 161, 197, 117, 15, 10, 161, 170, 179, 218, 235, 42, 23, 216, 43, 247, 224, 186, 49 },
                            PasswordSalt = new byte[] { 155, 60, 205, 55, 124, 12, 229, 1, 134, 200, 51, 23, 168, 241, 8, 144, 192, 64, 232, 74, 8, 150, 19, 8 },
                            Role = "Manager",
                            UserName = "manager1"
                        },
                        new
                        {
                            Id = "3c3fb61d-39ad-4f7e-a47f-b95a50ac1506",
                            Email = "moderator@gmail.com",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 10, 80, 47, 90, 117, 187, 30, 1, 129, 205, 32, 83, 131, 131, 116, 194, 125, 232, 107, 207, 234, 86, 152, 138, 7, 241, 236, 220, 171, 136, 193, 118, 183, 135, 134, 73, 176, 155, 85, 136, 232, 25, 201, 164, 152, 45, 247, 125, 211, 92, 5, 208, 254, 68, 171, 165, 195, 165, 138, 163, 159, 12, 129, 103 },
                            PasswordSalt = new byte[] { 249, 95, 156, 79, 148, 207, 179, 118, 255, 46, 255, 30, 157, 242, 55, 23, 131, 249, 64, 75, 200, 157, 71, 90 },
                            Role = "Moderator",
                            UserName = "moderator1"
                        },
                        new
                        {
                            Id = "f050d9d4-c7cd-47ab-a609-084f177ca40d",
                            Email = "publisher1@gmail.com",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 130, 243, 150, 8, 223, 247, 223, 210, 46, 87, 58, 56, 78, 235, 22, 126, 98, 0, 26, 169, 120, 44, 89, 23, 63, 192, 56, 194, 40, 252, 150, 13, 189, 247, 110, 56, 252, 1, 22, 90, 87, 52, 127, 141, 58, 72, 92, 207, 91, 210, 85, 185, 195, 207, 234, 155, 48, 116, 193, 76, 54, 100, 222, 233 },
                            PasswordSalt = new byte[] { 237, 237, 219, 203, 93, 249, 43, 70, 233, 175, 42, 68, 87, 186, 79, 71, 140, 162, 21, 100, 124, 190, 37, 87 },
                            PublisherName = "DeepSilver",
                            Role = "Publisher",
                            UserName = "publisher1"
                        });
                });

            modelBuilder.Entity("GameStore.DAL.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvalidated")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Comment", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Comment", null)
                        .WithMany("Answers")
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Genre", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Genre", null)
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.GenresInGames", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.OrderDetails", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.PlatformsInGames", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.DAL.Entities.PlatformType", "PlatformType")
                        .WithMany()
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("PlatformType");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("GameStore.DAL.Entities.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Comment", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Game", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("GameStore.DAL.Entities.User", b =>
                {
                    b.Navigation("UserRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
